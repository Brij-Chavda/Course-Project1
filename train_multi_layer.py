# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WGhC2RWOtVycDfvFbkagTZa6-GHRWDAN
"""

import numpy as np
import collections, numpy
from matplotlib import pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
from tensorflow import keras

def create_MLP():
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=(28, 28, 1)),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(10, activation='softmax')
    ])
    optim = keras.optimizers.Adam(decay=1e-4)
    model.compile(optimizer=optim,
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    return model

if __name__ == "__main__":

    number_epochs = 30
    fashion_mnist = keras.datasets.fashion_mnist
    (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
    train_images = train_images.astype('float32') / 255
    test_images = test_images.astype('float32') / 255
    
    train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
    test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

    model = create_MLP()
    network = model.fit(train_images,train_labels,batch_size=500,epochs=number_epochs, validation_split=0.15)
    
    test_loss, test_acc = model.evaluate(test_images,test_labels)
    predicted_data=(np.argmax(model.predict(test_images),1))
    print(test_acc)

model.save('models/MLP_model.h5')

loss_m = network.history["loss"]
plt.plot(loss_m)
plt.xlabel('no of epochs') 
plt.ylabel('loss') 
plt.title('MultiLayerNet loss')

from sklearn.metrics import confusion_matrix
confusion_matrix(test_labels , predicted_data )